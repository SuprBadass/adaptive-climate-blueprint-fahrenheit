blueprint:
  name: ASHRAE 55 Adaptive Climate Control
  description: 'Intelligent climate control implementing ASHRAE 55 adaptive comfort
    model with energy optimization.

    This blueprint dynamically adjusts comfort zones based on outdoor temperature,
    provides 15-30% energy savings, and works seamlessly with SmartIR and other climate
    platforms.

    '
  domain: automation
  author: Marco Sinhoreli
  source_url: https://github.com/msinhore/adaptive-climate-blueprint/blob/main/blueprints/ashrae55_adaptive_comfort_v2_1.yaml
  input:
    comfort_category:
      name: ASHRAE 55 Comfort Category
      description: 'Comfort category based on ASHRAE 55 standard: - Category I: ±2°C
        (90% satisfaction) - Office environments - Category II: ±3°C (80% satisfaction)
        - Typical residential  - Category III: ±4°C (65% satisfaction) - Maximum energy
        savings

        '
      default: II
      selector:
        select:
          options:
          - label: Category I (±2°C - 90% satisfaction)
            value: I
          - label: Category II (±3°C - 80% satisfaction)
            value: II
          - label: Category III (±4°C - 65% satisfaction)
            value: III
          multiple: false
          custom_value: false
          sort: false
    use_operative_temperature:
      name: Use Operative Temperature
      description: Enable operative temperature calculation (requires radiant temperature
        sensor)
      default: false
      selector:
        boolean: {}
    energy_save_mode:
      name: Energy Save Mode
      description: Enable enhanced energy saving features
      default: true
      selector:
        boolean: {}
    comfort_precision_mode:
      name: Precision Comfort Mode
      description: Use high-precision calculations matching CBE tool accuracy
      default: false
      selector:
        boolean: {}
    climate_entity:
      name: Climate Entity
      description: The climate device to control (SmartIR, generic thermostat, etc.)
      selector:
        entity:
          domain:
          - climate
          multiple: false
    indoor_temp_sensor:
      name: Indoor Temperature Sensor
      description: Temperature sensor, input number, or weather service for the room
        being controlled
      selector:
        entity:
          domain:
          - sensor
          - input_number
          - weather
          multiple: false
    outdoor_temp_sensor:
      name: Outdoor Temperature Sensor
      description: Temperature sensor, input number, or weather service for adaptive
        comfort calculations
      selector:
        entity:
          domain:
          - sensor
          - input_number
          - weather
          multiple: false
    occupancy_sensor:
      name: Occupancy Sensor (Optional)
      description: Motion or presence sensor for occupancy-aware control
      default:
      selector:
        entity:
          domain:
          - binary_sensor
          device_class:
          - motion
          - occupancy
          - presence
          multiple: false
    use_occupancy_features:
      name: Use Occupancy Features
      description: Enable occupancy-based features (requires occupancy sensor)
      default: false
      selector:
        boolean: {}
    prolonged_absence_minutes:
      name: Prolonged Absence Time
      description: Minutes without presence to switch to maximum energy saving (Category III)
      default: 60
      visibleWhen:
        - condition: state
          entity: use_occupancy_features
          state: true
      selector:
        number:
          min: 10.0
          max: 240.0
          step: 5.0
          unit_of_measurement: min
          mode: slider
    auto_shutdown_enable:
      name: Auto Shutdown on Prolonged Absence
      description: Automatically turn off HVAC when no presence is detected for extended period
      default: false
      visibleWhen:
        - condition: state
          entity: use_occupancy_features
          state: true
      selector:
        boolean: {}
    auto_shutdown_minutes:
      name: Auto Shutdown Time
      description: Minutes without presence to automatically turn off HVAC (requires Auto Shutdown enabled)
      default: 120
      visibleWhen:
        - condition: and
          conditions:
            - condition: state
              entity: use_occupancy_features
              state: true
            - condition: state
              entity: auto_shutdown_enable
              state: true
      selector:
        number:
          min: 15.0
          max: 480.0
          step: 5.0
          unit_of_measurement: min
          mode: slider
    mean_radiant_temp_sensor:
      name: Mean Radiant Temperature Sensor (Optional)
      description: Temperature sensor or input number for mean radiant temperature
        measurement (near windows, heated surfaces)
      default: ''
      visibleWhen:
        - condition: state
          entity: use_operative_temperature
          state: true
      selector:
        entity:
          domain:
          - sensor
          - input_number
          multiple: false
    humidity_comfort_enable:
      name: Humidity Comfort Correction
      description: Apply humidity-based comfort corrections
      default: true
      selector:
        boolean: {}
    indoor_humidity_sensor:
      name: Indoor Humidity Sensor (Optional)
      description: Humidity sensor or input number for enhanced comfort calculation
      default: ''
      visibleWhen:
        - condition: state
          entity: humidity_comfort_enable
          state: true
      selector:
        entity:
          domain:
          - sensor
          - input_number
          multiple: false
    outdoor_humidity_sensor:
      name: Outdoor Humidity Sensor (Optional)
      description: Humidity sensor, input number, or weather service for natural ventilation
        decisions
      default: ''
      visibleWhen:
        - condition: state
          entity: humidity_comfort_enable
          state: true
      selector:
        entity:
          domain:
          - sensor
          - input_number
          - weather
          multiple: false
    natural_ventilation_enable:
      name: Natural Ventilation Detection
      description: Automatically turn off HVAC when natural ventilation is sufficient
      default: true
      selector:
        boolean: {}
    natural_ventilation_threshold:
      name: Natural Ventilation Threshold
      description: Temperature difference threshold for natural ventilation (°C)
      default: 2.0
      visibleWhen:
        - condition: state
          entity: natural_ventilation_enable
          state: true
      selector:
        number:
          min: 0.5
          max: 5.0
          step: 0.5
          unit_of_measurement: °C
          mode: slider
    setback_temperature_offset:
      name: Setback Temperature Offset
      description: Temperature offset when room is unoccupied (°C)
      default: 2.0
      visibleWhen:
        - condition: state
          entity: energy_save_mode
          state: true
      selector:
        number:
          min: 1.0
          max: 5.0
          step: 0.5
          unit_of_measurement: °C
          mode: slider
    min_comfort_temp:
      name: Minimum Comfort Temperature
      description: Absolute minimum comfort temperature (°C)
      default: 18.0
      selector:
        number:
          min: 15.0
          max: 22.0
          step: 0.5
          unit_of_measurement: °C
          mode: slider
    max_comfort_temp:
      name: Maximum Comfort Temperature
      description: Absolute maximum comfort temperature (°C)
      default: 28.0
      selector:
        number:
          min: 25.0
          max: 32.0
          step: 0.5
          unit_of_measurement: °C
          mode: slider
    temperature_change_threshold:
      name: Temperature Change Threshold
      description: Minimum temperature difference (°C) to trigger set_temperature
        command
      default: 1.0
      selector:
        number:
          min: 0.5
          max: 2.0
          step: 0.5
          unit_of_measurement: °C
          mode: slider
    adaptive_air_velocity:
      name: Adaptive Air Velocity Control
      description: Automatically adjust fan speed based on temperature deviation
      default: true
      selector:
        boolean: {}
    air_velocity:
      name: Air Velocity (m/s)
      description: Typical air velocity in the space (affects cooling sensation)
      default: 0.1
      visibleWhen:
        - condition: state
          entity: comfort_precision_mode
          state: true
      selector:
        number:
          min: 0.0
          max: 2.0
          step: 0.1
          unit_of_measurement: m/s
          mode: slider
variables:
  temperature_change_threshold_val: !input temperature_change_threshold
  climate_entity_id: !input climate_entity
  indoor_sensor_id: !input indoor_temp_sensor
  outdoor_sensor_id: !input outdoor_temp_sensor
  occupancy_sensor_id: !input occupancy_sensor
  mean_radiant_sensor_id: !input mean_radiant_temp_sensor
  indoor_humidity_sensor_id: !input indoor_humidity_sensor
  outdoor_humidity_sensor_id: !input outdoor_humidity_sensor
  min_comfort_temp_val: !input min_comfort_temp
  max_comfort_temp_val: !input max_comfort_temp
  comfort_category_val: !input comfort_category
  energy_save_mode_val: !input energy_save_mode
  natural_ventilation_enable_val: !input natural_ventilation_enable
  natural_ventilation_threshold_val: !input natural_ventilation_threshold
  setback_temperature_offset_val: !input setback_temperature_offset
  use_operative_temperature_val: !input use_operative_temperature
  air_velocity_val: !input air_velocity
  adaptive_air_velocity_val: !input adaptive_air_velocity
  humidity_comfort_enable_val: !input humidity_comfort_enable
  comfort_precision_mode_val: !input comfort_precision_mode
  use_occupancy_features_val: !input use_occupancy_features
  auto_shutdown_enable_val: !input auto_shutdown_enable
  auto_shutdown_minutes_val: !input auto_shutdown_minutes
  comfort_tolerance: "{% if comfort_category_val == \"I\" %}\n  2.0\n{% elif comfort_category_val
    == \"II\" %}\n  3.0\n{% else %}\n  4.0\n{% endif %}\n"
  outdoor_temp: "{% if outdoor_sensor_id.startswith('weather.') %}\n  {{ state_attr(outdoor_sensor_id,
    'temperature') | float(20) }}\n{% else %}\n  {{ states(outdoor_sensor_id) | float(20)
    }}\n{% endif %}\n"
  indoor_air_temp: "{% if indoor_sensor_id.startswith('weather.') %}\n  {{ state_attr(indoor_sensor_id,
    'temperature') | float(20) }}\n{% else %}\n  {{ states(indoor_sensor_id) | float(20)
    }}\n{% endif %}\n"
  mean_radiant_temp: "{% if mean_radiant_sensor_id and mean_radiant_sensor_id != \"\"
    %}\n  {{ states(mean_radiant_sensor_id) | float(indoor_air_temp) }}\n{% else %}\n
    \ {{ indoor_air_temp }}\n{% endif %}\n"
  operative_temp: "{% if use_operative_temperature_val and mean_radiant_sensor_id
    and mean_radiant_sensor_id != \"\" %}\n  {{ ((indoor_air_temp + mean_radiant_temp)
    / 2) | round(1) }}\n{% else %}\n  {{ indoor_air_temp }}\n{% endif %}\n"
  indoor_temp: '{{ operative_temp }}'
  indoor_humidity: "{% if indoor_humidity_sensor_id and indoor_humidity_sensor_id
    != \"\" %}\n  {{ states(indoor_humidity_sensor_id) | float(50) }}\n{% else %}\n
    \ 50\n{% endif %}\n"
  outdoor_humidity: "{% if outdoor_humidity_sensor_id and outdoor_humidity_sensor_id
    != \"\" %}\n  {% if outdoor_humidity_sensor_id.startswith('weather.') %}\n    {{
    state_attr(outdoor_humidity_sensor_id, 'humidity') | float(50) }}\n  {% else %}\n
    \   {{ states(outdoor_humidity_sensor_id) | float(50) }}\n  {% endif %}\n{% else
    %}\n  50\n{% endif %}\n"
  air_velocity_offset: "{% if operative_temp > 25 and air_velocity_val > 0.3 %}\n
    \ {% if air_velocity_val >= 1.2 %}\n    -2.2\n  {% elif air_velocity_val >= 0.9
    %}\n    -1.8\n  {% elif air_velocity_val >= 0.6 %}\n    -1.2\n  {% else %}\n    {{
    -1.2 * ((air_velocity_val - 0.3) / 0.3) | round(1) }}\n  {% endif %}\n{% else
    %}\n  0\n{% endif %}\n"
  humidity_offset: "{% if humidity_comfort_enable_val and indoor_humidity > 60 %}\n
    \ {{ 0.3 * ((indoor_humidity - 60) / 10) | round(1) }}\n{% elif humidity_comfort_enable_val
    and indoor_humidity < 30 %}\n  {{ -0.2 * ((30 - indoor_humidity) / 10) | round(1)
    }}\n{% else %}\n  0\n{% endif %}\n"
  base_adaptive_comfort_temp: '{{ (18.9 + 0.255 * outdoor_temp) | round(1) }}

    '
  outdoor_temp_valid: '{{ outdoor_temp >= 10 and outdoor_temp <= 40 }}

    '
  adaptive_comfort_temp: "{% if outdoor_temp_valid %}\n  {% if comfort_precision_mode_val
    %}\n    {% set raw_temp = base_adaptive_comfort_temp + air_velocity_offset + humidity_offset
    %}\n  {% else %}\n    {% set raw_temp = base_adaptive_comfort_temp %}\n  {% endif
    %}\n  {% if outdoor_temp > indoor_temp %}\n    {{ raw_temp | round(0, 'floor')
    | int }}\n  {% elif outdoor_temp < indoor_temp %}\n    {{ raw_temp | round(0,
    'ceil') | int }}\n  {% else %}\n    {{ raw_temp | round(0) | int }}\n  {% endif
    %}\n{% else %}\n  22\n{% endif %}\n"
  comfort_temp_min: '{{ [adaptive_comfort_temp - comfort_tolerance, min_comfort_temp_val]
    | max | round(1) }}

    '
  comfort_temp_max: '{{ [adaptive_comfort_temp + comfort_tolerance, max_comfort_temp_val]
    | min | round(1) }}

    '
  is_occupied: "{% if occupancy_sensor_id and occupancy_sensor_id != \"\" and use_occupancy_features_val %}\n  {{
    is_state(occupancy_sensor_id, 'on') }}\n{% else %}\n  true\n{% endif %}\n"
  natural_ventilation_available: "{% if natural_ventilation_enable_val %}\n  {% set
    temp_suitable = (outdoor_temp >= (indoor_temp - natural_ventilation_threshold_val))
    and \n                         (outdoor_temp <= (indoor_temp + natural_ventilation_threshold_val))
    and\n                         (outdoor_temp >= comfort_temp_min) and \n                         (outdoor_temp
    <= comfort_temp_max) %}\n  {% set humidity_suitable = true %}\n  {% if outdoor_humidity_sensor_id
    and outdoor_humidity_sensor_id != \"\" %}\n    {% set humidity_suitable = (outdoor_humidity
    <= (indoor_humidity + 10)) %}\n  {% endif %}\n  {{ temp_suitable and humidity_suitable
    }}\n{% else %}\n  false\n{% endif %}\n"
  optimal_fan_speed: "{% if adaptive_air_velocity_val and indoor_temp > comfort_temp_max
    %}\n  {% set temp_deviation = indoor_temp - comfort_temp_max %}\n  {% if temp_deviation
    > 3 %}\n    high\n  {% elif temp_deviation > 1.5 %}\n    medium\n  {% elif temp_deviation
    > 0.5 %}\n    low\n  {% else %}\n    auto\n  {% endif %}\n{% else %}\n  auto\n{%
    endif %}\n"
  target_temp: "{% if not is_occupied and energy_save_mode_val %}\n  {% if indoor_temp
    > comfort_temp_max %}\n    {{ comfort_temp_max | round(1) }}\n  {% elif indoor_temp
    < comfort_temp_min %}\n    {{ max(comfort_temp_min - setback_temperature_offset_val,
    min_comfort_temp_val) | round(1) }}\n  {% else %}\n    {% set raw_temp = adaptive_comfort_temp
    %}\n    {% if outdoor_temp > indoor_temp %}\n      {{ raw_temp | round(0, 'floor')
    | int }}\n    {% elif outdoor_temp < indoor_temp %}\n      {{ raw_temp | round(0,
    'ceil') | int }}\n    {% else %}\n      {{ raw_temp | round(0) | int }}\n    {%
    endif %}\n  {% endif %}\n{% else %}\n  {% if indoor_temp < comfort_temp_min %}\n
    \   {{ comfort_temp_min | round(1) }}\n  {% elif indoor_temp > comfort_temp_max
    %}\n    {{ comfort_temp_max | round(1) }}\n  {% else %}\n    {% set raw_temp =
    adaptive_comfort_temp %}\n    {% if outdoor_temp > indoor_temp %}\n      {{ raw_temp
    | round(0, 'floor') | int }}\n    {% elif outdoor_temp < indoor_temp %}\n      {{
    raw_temp | round(0, 'ceil') | int }}\n    {% else %}\n      {{ raw_temp | round(0)
    | int }}\n    {% endif %}\n  {% endif %}\n{% endif %}\n"
  current_hvac_mode: '{{ state_attr(climate_entity_id, ''hvac_mode'') | string | lower
    }}

    '
  current_temperature: '{{ state_attr(climate_entity_id, ''temperature'') | float(0)
    }}

    '
  current_fan_mode: '{{ state_attr(climate_entity_id, ''fan_mode'') | string | lower
    }}

    '
  hvac_mode_needs_change: "{% if indoor_temp < comfort_temp_min %}\n  {{ current_hvac_mode
    != 'heat' }}\n{% elif indoor_temp > comfort_temp_max %}\n  {{ current_hvac_mode
    != 'cool' }}\n{% else %}\n  false\n{% endif %}\n"
  temperature_needs_change: '{{ (current_temperature - target_temp) | abs >= temperature_change_threshold_val
    }}

    '
  fan_mode_needs_change: "{% if adaptive_air_velocity_val %}\n  {{ current_fan_mode
    != optimal_fan_speed }}\n{% else %}\n  false\n{% endif %}\n"
  prolonged_absence: "{% if occupancy_sensor_id and occupancy_sensor_id != \"\" and use_occupancy_features_val %}\n
    \ {% set last_seen = as_timestamp(states[occupancy_sensor_id].last_changed) %}\n
    \ {% set now = as_timestamp(now()) %}\n  {{ not is_state(occupancy_sensor_id,
    'on') and (now - last_seen) > ((prolonged_absence_minutes_val | default(60)) *
    60) }}\n{% else %}\n  false\n{% endif %}\n"
  auto_shutdown_absence: "{% if occupancy_sensor_id and occupancy_sensor_id != \"\" and use_occupancy_features_val and auto_shutdown_enable_val %}\n
    \ {% set last_seen = as_timestamp(states[occupancy_sensor_id].last_changed) %}\n
    \ {% set now = as_timestamp(now()) %}\n  {{ not is_state(occupancy_sensor_id,
    'on') and (now - last_seen) > (auto_shutdown_minutes_val * 60) }}\n{% else %}\n
    \ false\n{% endif %}\n"
  compliance_notes: "{% set notes = [] %} {% if outdoor_temp < 10 or outdoor_temp
    > 40 %}\n  {% set notes = notes + [\"Outdoor temp outside valid range (10-40°C):
    \" + outdoor_temp|string + \"°C\"] %}\n{% elif outdoor_temp > 33.5 %}\n  {% set
    notes = notes + [\"Outdoor temp above ASHRAE 55 standard range (10-33.5°C): \"
    + outdoor_temp|string + \"°C - using extrapolation\"] %}\n{% endif %} {% if operative_temp
    <= 25 and air_velocity_val > 0.3 %}\n  {% set notes = notes + [\"Air velocity
    cooling only applies above 25°C operative temp\"] %}\n{% endif %} {% if notes|length
    > 0 %}\n  {{ notes | join(\"; \") }}\n{% else %}\n  \"Compliant\"\n{% endif %}\n"
trigger:
- platform: time_pattern
  minutes: 0
- platform: time_pattern
  minutes: 10
- platform: time_pattern
  minutes: 20
- platform: time_pattern
  minutes: 30
- platform: time_pattern
  minutes: 40
- platform: time_pattern
  minutes: 50
- platform: state
  entity_id: !input indoor_temp_sensor
- platform: state
  entity_id: !input outdoor_temp_sensor
condition:
- condition: template
  value_template: '{{ states(climate_entity_id) != ''off'' }}

    '
- condition: template
  value_template: "{{ states(climate_entity_id) not in ['unavailable', 'unknown']
    and\n   states(indoor_sensor_id) not in ['unavailable', 'unknown'] and\n   states(outdoor_sensor_id)
    not in ['unavailable', 'unknown'] }}\n"
action:
- choose:
  # Auto shutdown due to prolonged absence - MUST COME FIRST
  - conditions:
    - condition: template
      value_template: '{{ auto_shutdown_absence }}'
    - condition: template
      value_template: '{{ states(climate_entity_id) != ''off'' }}'
    sequence:
    - service: climate.turn_off
      target:
        entity_id: !input climate_entity
    - service: logbook.log
      data:
        name: ASHRAE 55 Adaptive Climate {{ this.name}}
        message: 'Auto shutdown activated due to prolonged absence ({{ auto_shutdown_minutes_val }} min).
          HVAC turned off for energy saving.
          Last presence: {{ states[occupancy_sensor_id].last_changed | as_timestamp | timestamp_custom(''%H:%M:%S'') }}'
  - conditions:
    - condition: template
      value_template: '{{ natural_ventilation_available and is_occupied }}'
    sequence:
    - service: climate.turn_off
      target:
        entity_id: !input climate_entity
    - service: logbook.log
      data:
        name: ASHRAE 55 Adaptive Climate {{ this.name}}
        message: 'Natural ventilation active. HVAC turned off. Outdoor: {{ outdoor_temp
          }}°C, Indoor: {{ indoor_temp }}°C, Comfort zone: {{ comfort_temp_min }}-{{
          comfort_temp_max }}°C

          '
  - conditions:
    - condition: template
      value_template: '{{ not natural_ventilation_available and not auto_shutdown_absence }}'
    sequence:
    - choose:
      - conditions:
        - condition: template
          value_template: '{{ indoor_temp < comfort_temp_min }}'
        sequence:
        - service: climate.set_hvac_mode
          target:
            entity_id: !input climate_entity
          data:
            hvac_mode: heat
        - condition: template
          value_template: '{{ temperature_needs_change }}'
        - service: climate.set_temperature
          target:
            entity_id: !input climate_entity
          data:
            temperature: '{{ target_temp }}'
        - condition: template
          value_template: '{{ adaptive_air_velocity_val and fan_mode_needs_change
            }}'
        - service: climate.set_fan_mode
          target:
            entity_id: !input climate_entity
          data:
            fan_mode: low
      - conditions:
        - condition: template
          value_template: '{{ indoor_temp > comfort_temp_max }}'
        sequence:
        - service: climate.set_hvac_mode
          target:
            entity_id: !input climate_entity
          data:
            hvac_mode: cool
        - condition: template
          value_template: '{{ temperature_needs_change }}'
        - service: climate.set_temperature
          target:
            entity_id: !input climate_entity
          data:
            temperature: '{{ target_temp }}'
        - condition: template
          value_template: '{{ adaptive_air_velocity_val and fan_mode_needs_change
            }}'
        - service: climate.set_fan_mode
          target:
            entity_id: !input climate_entity
          data:
            fan_mode: '{{ optimal_fan_speed }}'
      - conditions:
        - condition: template
          value_template: '{{ indoor_temp >= comfort_temp_min and indoor_temp <= comfort_temp_max
            }}

            '
        sequence:
        - choose:
          - conditions:
            - condition: template
              value_template: '{{ outdoor_temp > comfort_temp_min and comfort_temp_min
                > indoor_temp }}

                '
            sequence:
            - condition: template
              value_template: '{{ current_hvac_mode != ''fan_only'' }}

                '
            - service: climate.set_hvac_mode
              target:
                entity_id: !input climate_entity
              data:
                hvac_mode: fan_only
            - service: climate.set_fan_mode
              target:
                entity_id: !input climate_entity
              data:
                fan_mode: medium
          - conditions:
            - condition: template
              value_template: '{{ outdoor_temp < comfort_temp_max and comfort_temp_max
                < indoor_temp }}

                '
            sequence:
            - condition: template
              value_template: '{{ current_hvac_mode != ''fan_only'' }}

                '
            - service: climate.set_hvac_mode
              target:
                entity_id: !input climate_entity
              data:
                hvac_mode: fan_only
            - service: climate.set_fan_mode
              target:
                entity_id: !input climate_entity
              data:
                fan_mode: low
          - conditions:
            - condition: template
              value_template: '{{ (outdoor_temp - indoor_temp) > 3 }}'
            sequence:
            - condition: template
              value_template: '{{ current_hvac_mode != ''cool'' }}

                '
            - service: climate.set_hvac_mode
              target:
                entity_id: !input climate_entity
              data:
                hvac_mode: cool
            - condition: template
              value_template: '{{ temperature_needs_change }}'
            - service: climate.set_temperature
              target:
                entity_id: !input climate_entity
              data:
                temperature: '{{ target_temp }}'
          - conditions:
            - condition: template
              value_template: '{{ (indoor_temp - outdoor_temp) > 3 }}'
            sequence:
            - condition: template
              value_template: '{{ current_hvac_mode != ''heat'' }}

                '
            - service: climate.set_hvac_mode
              target:
                entity_id: !input climate_entity
              data:
                hvac_mode: heat
            - condition: template
              value_template: '{{ temperature_needs_change }}'
            - service: climate.set_temperature
              target:
                entity_id: !input climate_entity
              data:
                temperature: '{{ target_temp }}'
          - conditions: []
            sequence:
            - choose:
              - conditions:
                - condition: template
                  value_template: '{{ outdoor_temp > indoor_temp }}'
                sequence:
                - condition: template
                  value_template: '{{ current_hvac_mode != ''cool'' }}'
                - service: climate.set_hvac_mode
                  target:
                    entity_id: !input climate_entity
                  data:
                    hvac_mode: cool
                - condition: template
                  value_template: '{{ temperature_needs_change }}'
                - service: climate.set_temperature
                  target:
                    entity_id: !input climate_entity
                  data:
                    temperature: '{{ adaptive_comfort_temp }}'
              - conditions:
                - condition: template
                  value_template: '{{ outdoor_temp < indoor_temp }}'
                sequence:
                - condition: template
                  value_template: '{{ current_hvac_mode != ''heat'' }}'
                - service: climate.set_hvac_mode
                  target:
                    entity_id: !input climate_entity
                  data:
                    hvac_mode: heat
                - condition: template
                  value_template: '{{ temperature_needs_change }}'
                - service: climate.set_temperature
                  target:
                    entity_id: !input climate_entity
                  data:
                    temperature: '{{ adaptive_comfort_temp }}'
              - conditions:
                - condition: template
                  value_template: '{{ outdoor_temp == indoor_temp }}'
                sequence: []
        - condition: template
          value_template: '{{ adaptive_air_velocity_val and fan_mode_needs_change
            }}'
        - service: climate.set_fan_mode
          target:
            entity_id: !input climate_entity
          data:
            fan_mode: auto
    - service: logbook.log
      data:
        name: ASHRAE 55 Adaptive Climate {{ this.name }}
        message: 'ASHRAE 55 compliant climate control applied.  Target: {{ target_temp
          }}°C (Current: {{ current_temperature }}°C), Indoor: {{ indoor_temp }}°C,
          Outdoor: {{ outdoor_temp }}°C, Comfort zone: {{ comfort_temp_min }}-{{ comfort_temp_max
          }}°C (adaptive temp: {{ adaptive_comfort_temp }}°C), HVAC Mode: {% if indoor_temp
          < comfort_temp_min %}HEAT (below comfort zone){% elif indoor_temp > comfort_temp_max
          %}COOL (above comfort zone){% elif outdoor_temp > comfort_temp_min and comfort_temp_min
          > indoor_temp %}FAN (natural ventilation opportunity){% elif outdoor_temp
          < comfort_temp_max and comfort_temp_max < indoor_temp %}FAN (natural ventilation
          opportunity){% elif (outdoor_temp - indoor_temp) > 3 %}COOL (outdoor >>3°C
          warmer){% elif (indoor_temp - outdoor_temp) > 3 %}HEAT (outdoor >>3°C cooler){%
          else %}AUTO (within comfort zone){% endif %} (was {{ current_hvac_mode }}),
          Occupancy: {{ ''Occupied'' if is_occupied else ''Unoccupied'' }}, Category:
          {{ comfort_category_val }} (±{{ comfort_tolerance }}°C), {% if comfort_precision_mode_val
          %}Air velocity offset: {{ air_velocity_offset }}°C, Humidity offset: {{
          humidity_offset }}°C,{% endif %} {% if adaptive_air_velocity_val %}Fan:
          {{ current_fan_mode }}{% if fan_mode_needs_change %} → {{ optimal_fan_speed
          }}{% endif %},{% endif %} Compliance: {{ compliance_notes }}

          '
mode: single
max_exceeded: silent
