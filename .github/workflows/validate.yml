name: Validate Blueprint

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate-yaml:
    runs-on: ubuntu-latest
    name: Validate YAML Syntax
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
    
    - name: Validate Blueprint YAML
      run: |
        echo "🔍 Validating Blueprint YAML structure..."
        
        # Check if blueprint file exists
        if [ ! -f "blueprints/ashrae55_adaptive_comfort_v2.yaml" ]; then
          echo "❌ Blueprint file not found"
          exit 1
        fi
        
        # Basic file validation
        if [ ! -s "blueprints/ashrae55_adaptive_comfort_v2.yaml" ]; then
          echo "❌ Blueprint file is empty"
          exit 1
        fi
        
        # Check for basic YAML structure
        if ! grep -q "blueprint:" "blueprints/ashrae55_adaptive_comfort_v2.yaml"; then
          echo "❌ Missing blueprint section"
          exit 1
        fi
        
        if ! grep -q "input:" "blueprints/ashrae55_adaptive_comfort_v2.yaml"; then
          echo "❌ Missing input section"
          exit 1
        fi
        
        echo "✅ Blueprint YAML structure looks valid"
    
    - name: Validate Example YAMLs
      run: |
        python -c "
        import yaml
        import os
        import sys
        
        error_count = 0
        for root, dirs, files in os.walk('examples'):
            for file in files:
                if file.endswith('.yaml'):
                    filepath = os.path.join(root, file)
                    try:
                        with open(filepath, 'r') as f:
                            # Skip validation for files containing template syntax
                            content = f.read()
                            if '{{' in content or '{%' in content:
                                print(f'⏭️  Skipping template file: {filepath}')
                                continue
                            yaml.safe_load(content)
                        print(f'✅ {filepath} is valid')
                    except yaml.YAMLError as e:
                        print(f'❌ {filepath} validation failed: {e}')
                        error_count += 1
        
        if error_count > 0:
            sys.exit(1)
        "

  validate-documentation:
    runs-on: ubuntu-latest
    name: Validate Documentation
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check README links
      run: |
        # Basic check for broken markdown links
        echo "🔍 Checking documentation structure..."
        
        # Check if README exists
        if [ ! -f README.md ]; then
          echo "❌ README.md not found"
          exit 1
        fi
        
        # Check docs directory
        if [ ! -d docs/ ]; then
          echo "⚠️  docs/ directory not found"
        fi
        
        echo "✅ Documentation structure validated"
    
    - name: Validate Markdown syntax
      continue-on-error: true
      run: |
        echo "📝 Validating markdown syntax..."
        
        # Install markdownlint if available
        if command -v markdownlint &> /dev/null; then
          markdownlint README.md docs/*.md examples/*.md || echo "⚠️  Some markdown issues found (non-blocking)"
        else
          echo "⏭️  markdownlint not available, skipping"
        fi
        
        echo "✅ Markdown validation completed"

  check-blueprint-structure:
    runs-on: ubuntu-latest
    name: Check Blueprint Structure
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Validate Blueprint Structure
      run: |
        echo "🏗️ Checking Blueprint Structure..."
        
        # Check if blueprint file exists
        if [ ! -f "blueprints/ashrae55_adaptive_comfort_v2.yaml" ]; then
          echo "❌ Blueprint file not found"
          exit 1
        fi
        
        # Check for required sections
        echo "Checking required sections..."
        
        if ! grep -q "blueprint:" "blueprints/ashrae55_adaptive_comfort_v2.yaml"; then
          echo "❌ Missing blueprint section"
          exit 1
        fi
        
        if ! grep -q "name:" "blueprints/ashrae55_adaptive_comfort_v2.yaml"; then
          echo "❌ Missing blueprint name"
          exit 1
        fi
        
        if ! grep -q "domain:" "blueprints/ashrae55_adaptive_comfort_v2.yaml"; then
          echo "❌ Missing blueprint domain"
          exit 1
        fi
        
        if ! grep -q "input:" "blueprints/ashrae55_adaptive_comfort_v2.yaml"; then
          echo "❌ Missing input section"
          exit 1
        fi
        
        if ! grep -q "trigger:" "blueprints/ashrae55_adaptive_comfort_v2.yaml"; then
          echo "❌ Missing trigger section"
          exit 1
        fi
        
        if ! grep -q "action:" "blueprints/ashrae55_adaptive_comfort_v2.yaml"; then
          echo "❌ Missing action section"
          exit 1
        fi
        
        # Check for required inputs
        if ! grep -q "climate_entity:" "blueprints/ashrae55_adaptive_comfort_v2.yaml"; then
          echo "❌ Missing climate_entity input"
          exit 1
        fi
        
        if ! grep -q "indoor_temp_sensor:" "blueprints/ashrae55_adaptive_comfort_v2.yaml"; then
          echo "❌ Missing indoor_temp_sensor input"
          exit 1
        fi
        
        if ! grep -q "outdoor_temp_sensor:" "blueprints/ashrae55_adaptive_comfort_v2.yaml"; then
          echo "❌ Missing outdoor_temp_sensor input"
          exit 1
        fi
        
        echo "✅ Blueprint structure is valid"
        echo "📄 All required sections found"
        echo "🏠 All required inputs present"

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security checks
      run: |
        # Check for potential security issues in templates
        echo "🔍 Scanning for security issues..."
        
        # Check for unsafe template usage
        if grep -r "states\[" blueprints/ examples/ 2>/dev/null; then
          echo "⚠️  Found potentially unsafe state access patterns"
        fi
        
        # Check for hardcoded credentials (excluding documentation examples)
        if grep -ri "password\|token\|secret" blueprints/ examples/ | grep -v "# " | grep -v README | grep -v "SUA_CHAVE_API" | grep -v "YOUR_API_KEY" | grep -v "api_key:" | grep -v ".md:"; then
          echo "❌ Found potential hardcoded credentials"
          exit 1
        fi
        
        echo "✅ Security scan completed"

  test-coverage:
    runs-on: ubuntu-latest
    name: Test Coverage Check
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check test coverage
      run: |
        echo "📊 Checking test coverage..."
        
        # Count example configurations
        example_count=$(find examples/ -name "*.yaml" | wc -l)
        echo "📄 Example configurations: $example_count"
        
        # Count documentation files
        doc_count=$(find docs/ -name "*.md" | wc -l)
        echo "📚 Documentation files: $doc_count"
        
        # Verify minimum coverage
        if [ $example_count -lt 2 ]; then
          echo "❌ Insufficient example configurations"
          exit 1
        fi
        
        if [ $doc_count -lt 2 ]; then
          echo "❌ Insufficient documentation"
          exit 1
        fi
        
        echo "✅ Test coverage adequate"
